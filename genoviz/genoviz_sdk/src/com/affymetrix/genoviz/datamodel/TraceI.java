/**
 *   Copyright (c) 1998-2005 Affymetrix, Inc.
 *    
 *   Licensed under the Common Public License, Version 1.0 (the "License").
 *   A copy of the license must be included with any distribution of
 *   this source code.
 *   Distributions from Affymetrix, Inc., place this in the
 *   IGB_LICENSE.html file.  
 *
 *   The license is also available at
 *   http://www.opensource.org/licenses/cpl.php
 */

package com.affymetrix.genoviz.datamodel;

/**
 * models a sequence trace typically generated by an
 * automated sequencing machine.
 */
public interface TraceI {

	/**
	 * indicates that the sequence is on the forward strand
	 * relative to some consensus sequence.
	 */
	public static final int FORWARD = 1;

	/**
	 * indicates that the sequence is on the reverse strand
	 * relative to some consensus sequence.
	 */
	public static final int REVERSE = -1;

	/**
	 *  sets the orientation.
	 *
	 *  @param forward true iff FORWARD
	 *  @see #FORWARD
	 *  @see #REVERSE
	 */
	public void setOrientation(boolean forward);

	/**
	 * gets the number of bases base the trace represents.
	 *
	 * @return the total number of bases called in this trace.
	 */
	public int getBaseCount();

	/**
	 * gets the number of places in the trace that data were sampled.
	 *
	 * @return the total number of data points in this trace
	 */
	public int getTraceLength();

	/**
	 * gets the maximum trace sample score in the trace.
	 *
	 * @return the maximum TraceSample score in the whole trace
	 */
	public int getMaxValue();

	/**
	 * gets the sample at a given point.
	 *
	 * @param index points to a position in the trace
	 * @return the TraceSample for the indexed data point.
	 */
	public TraceSample sampleAt(int index);

	/**
	 * gets the name assigned to the sequence.
	 *
	 * @return the name.
	 */
	public String getName();

	/**
	 * Performs a virtual reverse complement of the entire trace.
	 * Each sample point in the trace is reversed,
	 * so that the last point in the trace is the first point
	 * in the reverse trace,
	 * and the base values are switched for their complement.
	 *
	 * @return the new reverse complement Trace.
	 */
	public Trace reverseComplement();

	public void setActiveBaseCalls( BaseCalls theCalls ) ;

	public BaseCalls getActiveBaseCalls() ;

}
