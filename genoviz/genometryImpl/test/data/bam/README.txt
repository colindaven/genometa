Bam file visualization
There are parsers and writers for many languages already available.

The Java library is called sam/picard (http://picard.sourceforge.net/javadoc).

SAMFileReader(URL url, File indexFile, boolean eagerDecode) allows fetching over URL.
The client (IGB) could directly request slices of a bam file over ftp or http
or from a local file. This would allow quick access to data that is not behind a das/2
server. Of course requests should also be made possible via das/2.
One danger is that the bam file users want to upload is not sorted/indexed since these
are separate steps in the file creation process and the index is even in a different file (bam.bai).

Examples
Bam files for visualization prototyping and checking.
Bam combined: one alignment file of reads with some mutations (no indels!), and qualities
Bam paired: same alignments as in combined but paired mapping, therefore more, but no qualities.

Bam files were generated by: 
aligning simulated reads with bowtie-0.12.1 (output -S), and conversion with samtools-0.1.7a to bam.

1)
Screenshots were taken with IGV 1.5 dev.
+ One sees nicely the individual reads, their direction and mutations.
+ Quality of the reads are indicated in case of Mutations: mutations are greyed out
  if qualities are low. see screenshot igv_snapshot_zoomed_in_pop1.png where in the
  3. row the green A is almost not visible anymore (phred quality = 0)

Possible improvements over IGV (or things that are not shown, because the alignment file lacks them):
I see no indication of paired reads besides in the popup (where I wonder if its correct).
Paired reads should be connected somehow
There should be some indication of dangling reads
There should be an indication of inversion

2)
lookseq (render_image.cpp)
Using lookseqs render_image.cpp I created "render_image_\d.png" images (not all uploaded due to redundancy)
http://lookseq.svn.sourceforge.net/viewvc/lookseq/bam_c/render_image.cpp
lookseq shows 2 things:
a) class to render bam views can be compact and small
b) it can be fast (because bam can be indexed, so only a small slice will be retrieved quickly over e.g. http or ftp)

what this seems to lack is an indication of 

./render_image --bam=paired_mapping.sorted.bam --options=snps,pairs,arrows,single,faceaway,inversions,linkpairs,colordepth --region="chr1:51120000-51122000" --png="render_image_1.png
./render_image --bam=paired_mapping.sorted.bam --options=snps,pairs,single,faceaway,inversions,linkpairs,colordepth --region="chr1:51120000-51122000" --png="render_image_2.png
./render_image --bam=paired_mapping.sorted.bam --options=snps,pairs,single,inversions,linkpairs,colordepth --region="chr1:51120000-51122000" --png="render_image_3.png"
./render_image --bam=paired_mapping.sorted.bam --options=snps,pairs,single,inversions,colordepth --region="chr1:51120000-51122000" --png="render_image_4.png"
./render_image --bam=paired_mapping.sorted.bam --options=snps,pairs,arrows,single,inversions,colordepth --region="chr1:51120000-51122000" --png="render_image_4.png"
./render_image --bam=paired_mapping.sorted.bam --options=snps,pairs,arrows,single,inversions,colordepth --region="chr1:51120000-51122000" --png="render_image_5.png"
./render_image --bam=paired_mapping.sorted.bam --options=snps,pairs,inversions,colordepth --region="chr1:51120000-51122000" --png="render_image_6.png"
./render_image --bam=paired_mapping.sorted.bam --options=snps,pairs,inversions,colordepth,arrows --region="chr1:51120000-51122000" --png="render_image_7.png"
./render_image --bam=combined_mapping_q.sorted.bam --options=snps,pairs,arrows,single,faceaway,inversions,linkpairs,colordepth --region="chr1:51120000-51122000" --png="render_image_q_1.png"